//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2022.09.16 at 10:40:22 AM CEST 
//


package org.taktik.connector.business.medadminurses.domain;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for DecisionResultType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="DecisionResultType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="agreement"/>
 *     &lt;enumeration value="partialAgreement"/>
 *     &lt;enumeration value="onlyMedicalAgreement"/>
 *     &lt;enumeration value="onlyMedicalAgreementWithoutSmallRisks"/>
 *     &lt;enumeration value="rejection"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "DecisionResultType", namespace = "urn:be:cin:mycarenet:1.0:carenet:types")
@XmlEnum
public enum DecisionResultType {

    @XmlEnumValue("agreement")
    AGREEMENT("agreement"),
    @XmlEnumValue("partialAgreement")
    PARTIAL_AGREEMENT("partialAgreement"),
    @XmlEnumValue("onlyMedicalAgreement")
    ONLY_MEDICAL_AGREEMENT("onlyMedicalAgreement"),
    @XmlEnumValue("onlyMedicalAgreementWithoutSmallRisks")
    ONLY_MEDICAL_AGREEMENT_WITHOUT_SMALL_RISKS("onlyMedicalAgreementWithoutSmallRisks"),
    @XmlEnumValue("rejection")
    REJECTION("rejection");
    private final String value;

    DecisionResultType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static DecisionResultType fromValue(String v) {
        for (DecisionResultType c: DecisionResultType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
